{"version":3,"sources":["component/BtnCenter.js","component/BtnLeft.js","component/BtnRight.js","static/audio.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["BtnCenter","isPause","songRef","setIsPause","onClick","current","play","className","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","pause","BtnLeft","gotoSong","BtnRight","audio","img","placeholder","src","singer","songName","App","useRef","useState","hasChange","setHasChange","song","setSong","barValue","setBarValue","songSekarang","value","nextSong","length","useEffect","window","document","getElementById","addEventListener","e","target","autoPlay","onEnded","onTimeUpdate","currentTime","id","onChange","type","min","max","duration","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.fe7e038c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function BtnCenter({isPause, songRef, setIsPause}) {\r\n    return (\r\n        <div>\r\n            {isPause ? (\r\n                <svg\r\n                    onClick={() => {\r\n                        songRef.current.play();\r\n                        setIsPause(!isPause);\r\n                        }\r\n                    }\r\n                    className=\"w-6 h-6 btn\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"\r\n                     xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\r\n                          d=\"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\"/>\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\r\n                          d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"/>\r\n                </svg>\r\n            ) : (\r\n                <svg\r\n                    onClick={() => {\r\n                        songRef.current.pause();\r\n                        setIsPause(!isPause);\r\n                        }\r\n                    }\r\n                    className=\"w-6 h-6 btn white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\r\n                          d=\"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\"/>\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\r\n                          d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"/>\r\n                </svg>\r\n            )}\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport default function BtnLeft({gotoSong}) {\r\n    return (\r\n        <div>\r\n            <svg onClick={() => {\r\n                return (\r\n                    gotoSong(-1)\r\n                )\r\n            }}\r\n                className=\"w-6 h-6 btn\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"\r\n                 xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\r\n                      d=\"M11 15l-3-3m0 0l3-3m-3 3h8M3 12a9 9 0 1118 0 9 9 0 01-18 0z\"/>\r\n            </svg>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport default function BtnRight({gotoSong}) {\r\n    return (\r\n        <div>\r\n            <svg\r\n                onClick={() => {\r\n                return (\r\n                    gotoSong(1)\r\n                )\r\n            }}\r\n                className=\"w-6 h-6 btn\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"\r\n                 xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\r\n                      d=\"M13 9l3 3m0 0l-3 3m3-3H8m13 0a9 9 0 11-18 0 9 9 0 0118 0z\"/>\r\n            </svg>\r\n        </div>\r\n    )\r\n}","const audio = [\r\n    {\r\n        img: process.env.PUBLIC_URL + '/assets/1.jpg',\r\n        placeholder: process.env.PUBLIC_URL + 'logo512.png',\r\n        src: process.env.PUBLIC_URL + '/assets/Suiso.mp3',\r\n        singer: 'Suiso',\r\n        songName: 'Suiso name'\r\n    },\r\n    {\r\n        img: process.env.PUBLIC_URL + '/assets/2.jpg',\r\n        placeholder: process.env.PUBLIC_URL + 'logo512.png',\r\n        src: process.env.PUBLIC_URL + 'assets/Angel.mp3',\r\n        singer: 'Angel',\r\n        songName: 'Angel name'\r\n    }\r\n];\r\n\r\nexport default audio;","import React, {useEffect, useRef, useState} from 'react';\nimport './App.css';\nimport {LazyLoadImage} from 'react-lazy-load-image-component';\n\nimport BtnCenter from \"./component/BtnCenter\";\nimport BtnLeft from \"./component/BtnLeft\";\nimport BtnRight from \"./component/BtnRight\";\nimport audio from \"./static/audio\";\n\nfunction App() {\n    const songRef = useRef(null);\n\n    const [isPause, setIsPause] = useState(true);\n    const [hasChange, setHasChange] = useState(false);\n    const [song, setSong] = useState(0);\n    const [barValue, setBarValue] = useState(0);\n\n    const songSekarang = audio[song];\n\n    const gotoSong = (value) => {\n        const nextSong = song + value;\n        const firstSong = 0;\n        const lastSong = audio.length - 1;\n        if(nextSong >= audio.length) {\n            setSong(firstSong);\n        } else if(nextSong < firstSong) {\n            setSong(lastSong)\n        } else {\n            setSong(nextSong);\n        }\n\n        setHasChange(true);\n        setIsPause(false);\n    };\n\n    useEffect(() => {\n        window.document\n            .getElementById(\"audio_element\")\n            .addEventListener('loadedmetadata', (e) => {\n               songRef.current = e.target;\n            });\n    }, []);\n\n    return (\n        <div className=\"App root\">\n            <div className=\"container\">\n                <LazyLoadImage className={`img ${isPause ? \"\" : \"animation-spin\"}`}\n                    src={songSekarang.img}\n                />\n\n                <div className=\"song-info\">\n                    <h1>{songSekarang.songName}</h1>\n                    <p>{songSekarang.singer}</p>\n                    <audio\n                        autoPlay={hasChange}\n                        onEnded={() => gotoSong(1)}\n                        onTimeUpdate={() => {\n                            setBarValue(songRef.current.currentTime);\n                        }}\n                        src={songSekarang.src}\n                        id=\"audio_element\"/>\n                </div>\n\n                <div>\n                    <input\n                        onChange={(e) => {\n                            return (\n                                songRef.current.currentTime = e.target.value\n                            )\n                        }}\n                        value={barValue} type=\"range\" min={0} max={songRef.current?.duration}/>\n                </div>\n\n                <div className=\"controller-play\">\n                    {/*kiri*/}\n                    <BtnLeft gotoSong={gotoSong}/>\n\n                    {/*play tenggah*/}\n                    <BtnCenter\n                        isPause={isPause}\n                        songRef={songRef}\n                        setIsPause={setIsPause}\n                    />\n\n                    {/*kanan*/}\n                    <BtnRight gotoSong={gotoSong}/>\n\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}